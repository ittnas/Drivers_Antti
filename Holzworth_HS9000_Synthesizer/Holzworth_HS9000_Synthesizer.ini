# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: Holzworth HS9000 Synthesizer

# The version string should be updated whenever changes are made to this config file
version: 1.0

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: Holzworth_HS9000_Synthesizer

interface: TCPIP


[Model and options]
# The option section allow instruments with different options to use the same driver

# List of models supported by this driver
model_str_1: HS9004A

# Check instrument model id at startup (True or False). Default is False
check_model: True
model_cmd: :CH0:IDN?

# Valid model strings returned by the instrument. Default value = model_str
# model_id_1:

# Installed options (shown as checkbox controls)
option_str_1: External Modulation

# Check instrument options at startup (True or False). Default is False
check_options: False


# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = True

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: False

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 2

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication. 
query_instr_errors: False

# default interface is tcpip, with specific port
tcpip_specify_port: True
tcpip_port: 9760

# special settings for message format
always_read_after_write: True
term_char: LF
str_value_out: %.3f 
str_true: ON
str_false: OFF

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
error_cmd: :SYST:ERR?

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
init: 

# Final commands sent to the instrument when closing the driver
final: 


# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.


[Ch1 - Output]
datatype: BOOLEAN
def_value: Off
set_cmd: :CH1:PWR:RF:<*>
get_cmd: :CH1:PWR:RF?
group: Channel 1
section: Channels
[Ch1 - Frequency]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
low_lim: 1.0E7
high_lim: 1.25E10
set_cmd: :CH1:FREQ:<*>Hz
group: Channel 1
section: Channels
[Ch1 - Power]
unit: dBm
datatype: DOUBLE
def_value: -10
low_lim: -23
high_lim: 20
set_cmd: :CH1:PWR:<*>DBM
get_cmd: :CH1:PWR?
#state_quant: Output unit
#state_value_1: Power [dBm]
group: Channel 1
section: Channels
[Ch1 - Phase]
unit: deg
datatype: DOUBLE
def_value: 0
low_lim: 0
high_lim: 360
set_cmd: :CH1:PHASE:<*>DEG
get_cmd: :CH1:PHASE?
group: Channel 1
section: Channels
[Ch1 - Modulation]
datatype: COMBO
def_value: Off
combo_def_1: Off
combo_def_2: On
cmd_def_1: OFF
cmd_def_2: PULSE:EXT
set_cmd: :CH1:MOD:MODE:<*>
get_cmd: :CH1:MOD:MODE?
option_value_1: External Modulation
group: Channel 1
section: Channels


[Ch2 - Output]
datatype: BOOLEAN
def_value: Off
set_cmd: :CH2:PWR:RF:<*>
get_cmd: :CH2:PWR:RF?
group: Channel 2
section: Channels
[Ch2 - Frequency]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
low_lim: 1.0E7
high_lim: 1.25E10
set_cmd: :CH2:FREQ:<*>Hz
group: Channel 2
section: Channels
[Ch2 - Power]
unit: dBm
datatype: DOUBLE
def_value: -10
low_lim: -23
high_lim: 20
set_cmd: :CH2:PWR:<*>DBM
get_cmd: :CH2:PWR?
#state_quant: Output unit
#state_value_1: Power [dBm]
group: Channel 2
section: Channels
[Ch2 - Phase]
unit: deg
datatype: DOUBLE
def_value: 0
low_lim: 0
high_lim: 360
set_cmd: :CH2:PHASE:<*>DEG
get_cmd: :CH2:PHASE?
group: Channel 2
section: Channels
[Ch2 - Modulation]
datatype: COMBO
def_value: Off
combo_def_1: Off
combo_def_2: On
cmd_def_1: OFF
cmd_def_2: PULSE:EXT
set_cmd: :CH2:MOD:MODE:<*>
get_cmd: :CH2:MOD:MODE?
option_value_1: External Modulation
group: Channel 2
section: Channels


[Ch3 - Output]
datatype: BOOLEAN
def_value: Off
set_cmd: :CH3:PWR:RF:<*>
get_cmd: :CH3:PWR:RF?
group: Channel 3
section: Channels
[Ch3 - Frequency]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
low_lim: 1.0E7
high_lim: 1.25E10
set_cmd: :CH3:FREQ:<*>Hz
group: Channel 3
section: Channels
[Ch3 - Power]
unit: dBm
datatype: DOUBLE
def_value: -10
low_lim: -23
high_lim: 20
set_cmd: :CH3:PWR:<*>DBM
get_cmd: :CH3:PWR?
#state_quant: Output unit
#state_value_1: Power [dBm]
group: Channel 3
section: Channels
[Ch3 - Phase]
unit: deg
datatype: DOUBLE
def_value: 0
low_lim: 0
high_lim: 360
set_cmd: :CH3:PHASE:<*>DEG
get_cmd: :CH3:PHASE?
group: Channel 3
section: Channels
[Ch3 - Modulation]
datatype: COMBO
def_value: Off
combo_def_1: Off
combo_def_2: On
cmd_def_1: OFF
cmd_def_2: PULSE:EXT
set_cmd: :CH3:MOD:MODE:<*>
get_cmd: :CH3:MOD:MODE?
option_value_1: External Modulation
group: Channel 3
section: Channels


[Ch4 - Output]
datatype: BOOLEAN
def_value: Off
set_cmd: :CH4:PWR:RF:<*>
get_cmd: :CH4:PWR:RF?
group: Channel 4
section: Channels
[Ch4 - Frequency]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
low_lim: 1.0E7
high_lim: 1.25E10
set_cmd: :CH4:FREQ:<*>Hz
group: Channel 4
section: Channels
[Ch4 - Power]
unit: dBm
datatype: DOUBLE
def_value: -10
low_lim: -23
high_lim: 20
set_cmd: :CH4:PWR:<*>DBM
get_cmd: :CH4:PWR?
#state_quant: Output unit
#state_value_1: Power [dBm]
group: Channel 4
section: Channels
[Ch4 - Phase]
unit: deg
datatype: DOUBLE
def_value: 0
low_lim: 0
high_lim: 360
set_cmd: :CH4:PHASE:<*>DEG
get_cmd: :CH4:PHASE?
group: Channel 4
section: Channels
[Ch4 - Modulation]
datatype: COMBO
def_value: Off
combo_def_1: Off
combo_def_2: On
cmd_def_1: OFF
cmd_def_2: PULSE:EXT
set_cmd: :CH4:MOD:MODE:<*>
get_cmd: :CH4:MOD:MODE?
option_value_1: External Modulation
group: Channel 4
section: Channels


[Reference]
datatype: COMBO
def_value: Internal 100MHz
combo_def_1: Internal 100MHz
combo_def_2: External 10MHz
combo_def_3: External 100MHz
cmd_def_1: INT:100MHz
cmd_def_2: EXT:10MHz
cmd_def_3: EXT:100MHz
set_cmd: :CH0:<*>
get_cmd: :CH0:STATUS?
group: Reference
section: Reference

; [Ext. Frequency]
; datatype: COMBO
; def_value: Internal
; combo_def_1: Internal
; combo_def_2: External
; cmd_def_1: 0MHz
; cmd_def_2: EXT
; state_quant: Reference
; state_value_1: External
; group: Reference
; section: Reference

